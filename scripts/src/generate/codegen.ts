import fs from 'fs'
import path from 'path'
import { ResultType } from '../types/index.js'
const __dirname = path.resolve()

export const resultToPrisma = (
  data: Map<string, ResultType>,
  base: string,
  extra: string
) => {
  const arrayData: ResultType[] = Array.from(data.values()).sort()

  let result = `${base}\n${extra}
// ------- Models generated by scripts/generate -------\n`

  arrayData.forEach((item) => {
    if (item.type === 'Master') {
      result += `model ${item.name} {\n`
      item.fields.forEach(({ key, value, extra }) => {
        const extraText = (
          extra?.map(
            ({ name, parameters }) =>
              `@${name}${
                parameters
                  ? `(${parameters
                      .map(
                        ({ key, value }, index) =>
                          `${index ? ', ' : ''}${key ? `${key}: ` : ''}${value}`
                      )
                      .join(' ')})`
                  : ''
              }`
          ) ?? []
        ).join(' ')
        result += `  ${key} ${value} ${extraText}\n`
      })
      // if (extraFields[item.name]) {
      //   extraFields[item.name].forEach((field) => {
      //     result += `  ${field}\n`
      //   })
      // }
      result += '}\n\n'
    } else if (item.type === 'Enum') {
      result += `enum ${item.name} {\n`
      item.fields.forEach((field) => {
        result += `  ${field.key}\n`
      })
      result += '}\n\n'
    }
  })

  fs.writeFileSync(path.join(__dirname, './data/schema.prisma'), result)
  fs.writeFileSync(
    path.join(__dirname, './data/result.json'),
    JSON.stringify(arrayData, null, 2)
  )
}
